<?xml version="1.0" encoding="UTF-8"?>
<WebLink xmlns="http://soap.sforce.com/2006/04/metadata">
    <fullName>Add_Booking</fullName>
    <availability>online</availability>
    <displayType>button</displayType>
    <linkType>javascript</linkType>
    <masterLabel>Add Booking</masterLabel>
    <openType>onClickJavaScript</openType>
    <protected>false</protected>
    <url>{!REQUIRESCRIPT(&quot;/soap/ajax/30.0/connection.js&quot;)} 
{!REQUIRESCRIPT(&quot;/soap/ajax/30.0/apex.js&quot;)} 


if(&#39;{!Sales_Order__c.Source_System__c}&#39; == &#39;CyberAd&#39;) 
{ 
var RequestBroker = new ActiveXObject(&#39;SalesForceRequestBroker.RequestBroker&#39;); 
var r = RequestBroker.LaunchCyberAd(&#39;{!GETSESSIONID()}&#39;); 
var Result = RequestBroker.ExecuteRequest(&#39;{!GETSESSIONID()}&#39;, &#39;{!Sales_Order__c.Id}&#39;, &#39;{\&quot;salesOrderSFID\&quot;:\&quot;{!Sales_Order__c.Id}\&quot;}&#39;); 
} 

else if(&#39;{!Sales_Order__c.Source_System__c}&#39; == &#39;Cyber$ell&#39;) 
{ 
var isReservations = false; 
var result = sforce.connection.query(&quot;Select Opportunity.StageName from OpportunityLineItem where Sales_Order__c = \&#39;{!Sales_Order__c.Id}\&#39; LIMIT 1&quot;); 
records = result.getArray(&quot;records&quot;); 

for (var i=0; i&lt; records.length; i++) { 
var record = records[i]; 
if(record.Opportunity.StageName == &#39;Reservation&#39;) 
{ 
isReservations = true; 
} 
} 

var wshShell; 
var cyberOpen; 
var cyberVersion; 
var bpStatus; 
var salesOrderId; 
var baNum; 
var bookingNum; 
var cyber; 
var conName; 
var homeNum; 
var placerName; 
var placerNumber; 
var salesRep; 
var intgId; 
var bookingProfileId; 
var conEmail; 

try { 
wshShell = new ActiveXObject(&quot;WScript.Shell&quot;); 
cyberVersion = &quot;CyberSell v6&quot;; 
cyberOpen = wshShell.AppActivate(cyberVersion); 

if (cyberOpen) { 
bpStatus = &quot;Pending&quot;; 

cyber = new ActiveXObject(&quot;CyberSell.Application&quot;); 
cyber = cyber.WrappedApplication; 
salesOrderId = &quot;{!Sales_Order__c.Calc_External_id__c}&quot;; 

// Get all values 
baNum = &quot;{!Sales_Order__c.Account_No__c}&quot;; 
bookingNum = &quot;&quot;; 
conName = &quot;{!Sales_Order__c.Creative_Contact_Name__c}&quot;; 
homeNum = &quot;{!Sales_Order__c.Creative_Contact_Phone__c}&quot;; 
placerName = &quot;{!Sales_Order__c.Placer_Contact_Name__c}&quot;; 
placerNumber = &quot;{!Sales_Order__c.Placer_Contact_Phone__c}&quot;; 
conEmail = &quot;{!Sales_Order__c.Creative_Contact_Email__c}&quot;; 

if (conName.replace(/^\s+|\s+$/g, &#39;&#39;) == &quot;&quot;) { 
conName = placerName; 
homeNum = placerNumber; 
} 

intgId = &quot;{!Sales_Order__c.Calc_External_id__c}&quot;; 

if (baNum != &quot;&quot;) { //Then go to Cybersell, Locate GBA and Create Booking. 
cyber.Execute(&quot;LocateAccount&quot;, &quot;[Number] = &#39;&quot; + baNum + &quot;&#39;&quot;); 
if (cyber.Results.Accounts.Count == 1) { 
//Next 2 lines are meant to select the Customers tab and select the first item. 
cyber.Results.CurrentTab = 0; 
cyber.Results.ListIndex = 1; 
cyber.Execute(&quot;NewBooking&quot;); 

//To check if we are on the correct form. 
if ((cyber.CurrentForm != null) &amp;&amp; (cyber.CurrentForm.Booking != null) &amp;&amp; (cyber.CurrentForm.Booking.GetField(&quot;^IsNew&quot;)) &amp;&amp; (cyber.CurrentForm.Booking.Account.AccountNumber == baNum)) { 
cyber.CurrentForm.Booking.Caller = placerName; 
var pb = cyber.CurrentForm.Booking.PropertyBag; 
pb.add(&quot;SFSessionId&quot;, &quot;{!$Api.Session_ID}&quot;); 

cyber.CurrentForm.Booking.SetField(&quot;^InsertionSets(1).Attributes([Attribute.Code]=&#39;~MATCON&#39;).Detail&quot;, conName); 
cyber.CurrentForm.Booking.SetField(&quot;^InsertionSets(1).Attributes([Attribute.Code]=&#39;~MATCON#&#39;).Detail&quot;, homeNum); 
cyber.CurrentForm.Booking.SetField(&quot;^Attributes([Attribute.Code]=&#39;~CLRCON#&#39;).Detail&quot;, placerNumber); 
cyber.CurrentForm.Booking.SetField(&quot;^Attributes([Attribute.Code]=&#39;~SIEBSO&#39;).Detail&quot;, intgId); 
cyber.CurrentForm.Booking.SetField(&quot;^InsertionSets(1).Attributes([Attribute.Code]=&#39;~MATCONE&#39;).Detail&quot;,conEmail); 

if(isReservations) 
{ 
cyber.CurrentForm.Booking.SetField(&quot;^Attributes([Attribute.Code]=&#39;~BOOKTYP&#39;).Detail&quot;,&quot;Reservation&quot;); 
} 

} 
} 
else 
{ 
alert(&quot;Invalid Booking account number\n&quot; + baNum + &quot; could not be found&quot;); 
} 
} 
else 
{ 
alert(&quot;Invalid Booking account number.&quot;); 
} 

cyber.UpdateGUI(); 
} else { 
alert(&quot;Unable to go to Cyber$ell. Please ensure that Cyber$ell is fully opened then try again.&quot;); 
} 
} catch (e) { 
// Write the generic error message to screen 
alert(e.toString() + cyber + e.errText + e.errCode); 
} finally { 
wshShell = null; 
cyber = null; 
} 

} 
else if(&#39;{!Sales_Order__c.Source_System__c}&#39; == &#39;AdPoint&#39;) 
{ 

var adAcctId = &quot;{!Sales_Order__c.Advertiser_AccountId__c}&quot;; 
var payerAcctId = &quot;{!Sales_Order__c.Payer_AccountId__c}&quot;; 
var conId = &quot;{!Sales_Order__c.ContactId__c}&quot;; 
var soId = &quot;{!Sales_Order__c.Id}&quot;; 

// check if advertiser account is digital account 
var adAccountQuery=&quot;SELECT Digital_Status__c FROM Account WHERE Id =\&#39;&quot;+ adAcctId + &quot;\&#39; limit 1&quot;; 

sforce.connection.query(adAccountQuery, { 
onSuccess : function(result) { 
var records = result.getArray(&quot;records&quot;); 

for (var i=0; i&lt;records.length; i++) { 
var record = records[i]; 

if(record.Digital_Status__c != &#39;Active&#39;) 
{ alert(&quot;Advertiser account is not digital account&quot;);} 
} 
}, 
onFailure : function(error) { 
alert(&quot;Error: &quot; + error); 
} 
}); 

// check if advertiser account is digital account 
var payerAccountQuery=&quot;SELECT Digital_Status__c FROM Account WHERE Id =\&#39;&quot;+ payerAcctId + &quot;\&#39; limit 1&quot;; 

sforce.connection.query(payerAccountQuery, { 
onSuccess : function(result) { 
var records = result.getArray(&quot;records&quot;); 

for (var i=0; i&lt;records.length; i++) { 
var record = records[i]; 

if(record.Digital_Status__c != &#39;Active&#39;) 
{ alert(&quot;Payer account is not digital account&quot;);} 
} 
}, 
onFailure : function(error) { 
alert(&quot;Error: &quot; + error); 
} 
}); 

// check if contact is associated with payer account 
var contactQuery = &quot;SELECT AccountId FROM Contact WHERE Id =\&#39;&quot;+ conId + &quot;\&#39; limit 1&quot;; 

sforce.connection.query(contactQuery, { 
onSuccess : function(result) { 
var records = result.getArray(&quot;records&quot;); 

for (var i=0; i&lt;records.length; i++) { 

var acctId = records[i].AccountId.substring(0, 15); 

if(acctId != payerAcctId) 
{ 
alert(&quot;Contact must associate with payer account&quot;); 
} 
} 
}, 
onFailure : function(error) { 
alert(&quot;Error: &quot; + error); 
} 
}); 
sforce.apex.execute( &quot;SalesOrderCreateBookingv2_ControllerX&quot;, &quot;createOrderInAdPointFromAddBookingButton&quot;, 
{advertiserAccountId: adAcctId, 
payerAccountId: payerAcctId, 
contactId: conId, 
salesOrderId: soId, 
fromBookingUI: false}, 
{onSuccess: function(result){ 
if(typeof(srcUp)==&#39;function&#39;) { 
srcSelf(&quot;/apex/AdPointOrder?id=&quot; + result + &quot;&amp;s=false&quot;); 
} else { 
window.location = &quot;/apex/AdPointOrder?id=&quot; + result + &quot;&amp;s=true&quot;; 
} 
}, 
onFailure: function(error){ 
alert(&#39;Error: &#39; + error.faultstring)} 
}); 
}</url>
</WebLink>
